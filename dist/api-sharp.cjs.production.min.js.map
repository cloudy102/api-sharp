{"version":3,"file":"api-sharp.cjs.production.min.js","sources":["../src/utils.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/cache/ExpireCache.ts","../src/http_client/WebXhrClient.ts","../src/http_client/WebAxiosClient.ts","../src/ApiSharp.ts"],"sourcesContent":["import { HttpHeader } from \"./types\"\r\n\r\nexport function isString(v: any): v is string {\r\n  return typeof v === \"string\"\r\n}\r\n\r\nexport function isFunction(v: any): v is Function {\r\n  return typeof v === \"function\"\r\n}\r\n\r\nexport function isUndefined(v: any): v is undefined {\r\n  return v === undefined\r\n}\r\n\r\nexport function isNumber(v: any): v is number {\r\n  return typeof v === \"number\"\r\n}\r\n\r\nexport function isObject(v: any): v is Object {\r\n  return v !== null && typeof v === \"object\"\r\n}\r\n\r\nexport function isPlainObject(v: any): v is Object {\r\n  return v !== null && typeof v === \"object\" && v.__proto__ === Object.prototype\r\n}\r\n\r\nexport function identity<T>(v: T): T {\r\n  return v\r\n}\r\n\r\nexport function getDefault(...args) {\r\n  for (let v of args) {\r\n    if (!isUndefined(v)) return v\r\n  }\r\n  return undefined\r\n}\r\n\r\nexport function encodeQuery(query: Object): string {\r\n  return Object.keys(query).reduce((q, k) => {\r\n    return (q ? q + \"&\" : q) + (encodeURIComponent(k) + \"=\" + encodeURIComponent(query[k]))\r\n  }, \"\")\r\n}\r\n\r\nexport function formatFullUrl(baseURL, url, query) {\r\n  const queryString = encodeQuery(query)\r\n  return baseURL + url + (queryString ? \"?\" : \"\") + queryString\r\n}\r\n\r\nexport function formatResponseHeaders(headers: string): HttpHeader {\r\n  var arr = headers.trim().split(/[\\r\\n]+/)\r\n  var headerMap = {}\r\n\r\n  arr.forEach(function(line) {\r\n    let parts = line.split(\": \")\r\n    let header = parts.shift()\r\n    let value = parts.join(\": \")\r\n    headerMap[header!] = value\r\n  })\r\n  return headerMap\r\n}\r\n\r\n/**\r\n * 对对象进行深度排序\r\n *\r\n * 如果是数组，转换为字符串后，按字母序排序\r\n * 如果是对象，按 key 进行字母排序\r\n *\r\n * @param {any} value\r\n */\r\nexport function getSortedString(value: any): string {\r\n  let str = \"\"\r\n  if (Array.isArray(value)) {\r\n    str = \"[\" + [...value].sort().map(getSortedString) + \"]\"\r\n  } else if (typeof value === \"object\") {\r\n    str = Object.keys(value)\r\n      .sort()\r\n      .reduce((str, key, index, arr) => {\r\n        str += `${key}:${value[key]}`\r\n        if (index !== arr.length - 1) {\r\n          str += \",\"\r\n        } else {\r\n          str += \"}\"\r\n        }\r\n        return str\r\n      }, \"{\")\r\n  } else {\r\n    str = String(value)\r\n  }\r\n  return str\r\n}","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && !check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import ICache from \"./ICache\"\r\n\r\nclass ExpireCacheItem<V> {\r\n  public data: V\r\n  public timeout: number\r\n  public cacheTime: number\r\n\r\n  constructor(data: V, timeout: number) {\r\n    this.data = data\r\n    this.timeout = timeout\r\n    // 创建对象时候的时间，大约设定为数据获得的时间\r\n    this.cacheTime = Date.now()\r\n  }\r\n}\r\n\r\nexport default class ExpireCache<V> implements ICache<V> {\r\n  private readonly cacheMap = new Map<string, ExpireCacheItem<V>>()\r\n  private readonly defaultCacheTime\r\n\r\n  constructor(defaultCacheTime = 5 * 60 * 1000) {\r\n    this.defaultCacheTime = defaultCacheTime\r\n  }\r\n\r\n  // 数据是否超时\r\n  isOverTime(key: string) {\r\n    const data = this.cacheMap.get(key)\r\n\r\n    if (!data) return true\r\n\r\n    const overTime = Date.now() - data.cacheTime\r\n    if (overTime > 0 && overTime > data.timeout) {\r\n      this.cacheMap.delete(key)\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  has(key) {\r\n    return !this.isOverTime(key)\r\n  }\r\n\r\n  delete(key: string) {\r\n    return this.cacheMap.delete(key)\r\n  }\r\n\r\n  get(key) {\r\n    if (this.isOverTime(key)) {\r\n      return undefined\r\n    }\r\n    const value = this.cacheMap.get(key)\r\n    if (!value) {\r\n      return undefined\r\n    }\r\n    return value.data\r\n  }\r\n\r\n  set(key, data, { timeout = this.defaultCacheTime } = {}) {\r\n    const itemCache = new ExpireCacheItem(data, timeout)\r\n    this.cacheMap.set(key, itemCache)\r\n    return data\r\n  }\r\n\r\n  clear() {\r\n    return this.cacheMap.clear()\r\n  }\r\n}\r\n","import { formatFullUrl, formatResponseHeaders, isPlainObject } from \"../utils\"\nimport { IHttpClient, IRequest, IResponse } from \"./IHttpClient\"\n\nexport default class WebXhrClient implements IHttpClient {\n  async request<T>(options: IRequest): Promise<IResponse<T>> {\n    return new Promise(resolve => {\n      const xhr = new XMLHttpRequest()\n      const fullUrl = formatFullUrl(options.baseURL, options.url, options.query)\n      xhr.open(options.method, fullUrl, true)\n      // 设置请求头\n      Object.keys(options.headers).forEach(key => xhr.setRequestHeader(key, options.headers[key]))\n\n      // 设置请求数据\n      let body: Document | BodyInit | null = null\n      if (options.method === \"POST\") {\n        if (isPlainObject(options.body)) {\n          body = JSON.stringify(options.body)\n          xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n        } else {\n          body = options.body\n        }\n      }\n      // 设置响应数据类型（只支持 JSON）\n      xhr.responseType = \"text\"\n      xhr.send(body)\n      xhr.onreadystatechange = function() {\n        if (this.readyState === XMLHttpRequest.DONE) {\n          const headers = formatResponseHeaders(this.getAllResponseHeaders())\n          const response = {\n            data: this.response,\n            status: this.status,\n            statusText: this.statusText,\n            headers\n          }\n          if (!this.response && this.responseText) {\n            response.data = this.responseText\n          }\n          // // try parse json\n          try {\n            response.data = JSON.parse(response.data)\n          } catch (err) {\n            // do nothing\n          }\n          resolve(response)\n        }\n      }\n    })\n  }\n}\n","import { IHttpClient, IRequest, IResponse } from \"./IHttpClient\"\nimport axios from \"axios\"\n\nexport default class WebAxiosClient implements IHttpClient {\n  async request<T>(options: IRequest): Promise<IResponse<T>> {\n    const res = await axios.request({\n      baseURL: options.baseURL,\n      url: options.url,\n      method: options.method,\n      params: options.method === \"GET\" ? options.query : null,\n      data: options.method === \"POST\" ? options.body : null,\n      headers: options.headers\n    })\n\n    return {\n      data: res.data,\n      status: res.status,\n      statusText: res.statusText,\n      headers: res.headers\n    }\n  }\n}\n","import {\r\n  ApiDescriptor,\r\n  HttpMethod,\r\n  ProcessedApiDescriptor,\r\n  ApiResponse,\r\n  HttpHeader,\r\n  Transformer,\r\n  LogFormatter,\r\n  Params\r\n} from \"./types\"\r\nimport invariant from \"tiny-invariant\"\r\nimport warning from \"tiny-warning\"\r\nimport PropTypes from \"prop-types\"\r\nimport { isString, isFunction, getSortedString, isUndefined, isNumber, isObject, identity, getDefault } from \"./utils\"\r\nimport { ICache, ExpireCache } from \"./cache\"\r\nimport { IHttpClient, IResponse, WebXhrClient } from \"./http_client\"\r\n\r\n// 全局配置\r\nexport interface ApiSharpOptions {\r\n  httpClient?: IHttpClient\r\n  baseURL?: string\r\n  method?: HttpMethod\r\n  headers?: HttpHeader\r\n  paramsTransformer?: Transformer<Params>\r\n  returnsTransformer?: Transformer<any>\r\n  enableCache?: boolean\r\n  cacheTime?: number\r\n  enableRetry?: boolean\r\n  retryTimes?: number\r\n  timeout?: number\r\n  enableLog?: boolean\r\n  logFormatter?: LogFormatter\r\n}\r\n\r\nexport class ApiSharpRequestError extends Error {\r\n  constructor(message?: string, public api?: ProcessedApiDescriptor) {\r\n    super(message)\r\n  }\r\n}\r\n\r\nexport const defaultConfig = {\r\n  httpClient: new WebXhrClient(),\r\n  cache: new ExpireCache<Promise<IResponse<any>>>(),\r\n  url: \"\",\r\n  baseURL: \"\",\r\n  headers: {},\r\n  enableMock: false,\r\n  mockData: undefined,\r\n  method: \"GET\",\r\n  params: {},\r\n  description: \"\",\r\n  enableCache: false,\r\n  cacheTime: 5 * 1000,\r\n  paramsTransformer: identity,\r\n  returnsTransformer: identity,\r\n  enableRetry: false,\r\n  retryTimes: 1,\r\n  timeout: 60 * 1000,\r\n  enableLog: process.env.NODE_ENV !== \"production\",\r\n  logFormatter: {\r\n    logRequest: (api: ProcessedApiDescriptor) => {\r\n      console.log(\r\n        `%cRequest %c %c${api.method}|${api.description}|${api.url}%c|%O`,\r\n        \"color: white; background-color: rgba(0, 116, 217, 0.69); padding: 2px 5px; border-radius: 2px\",\r\n        \"\",\r\n        \"color: #0074D9\",\r\n        \"\",\r\n        api.params\r\n      )\r\n    },\r\n    logResponse: (api: ProcessedApiDescriptor, data: any) => {\r\n      console.log(\r\n        `%cResponse%c %c${api.method}|${api.description}|${api.url}%c|%O|%O`,\r\n        \"color: white; background-color: rgba(61, 153, 112, 0.69); padding: 2px 5px; border-radius: 2px\",\r\n        \"\",\r\n        \"color: #3D9970\",\r\n        \"\",\r\n        api.params,\r\n        data\r\n      )\r\n    },\r\n    logResponseError: (_error: Error, api: ProcessedApiDescriptor, data: any) => {\r\n      console.log(\r\n        `%cResponse%c %c${api.method}|${api.description}|${api.url}%c|%O|%O`,\r\n        \"color: white; background-color: rgba(255, 65, 54, 0.69); padding: 2px 5px; border-radius: 2px\",\r\n        \"\",\r\n        \"color: #FF4136\",\r\n        \"\",\r\n        api.params,\r\n        data\r\n      )\r\n    },\r\n    logResponseCache: (api: ProcessedApiDescriptor, data: any) => {\r\n      console.log(\r\n        `%cResponse Cache %c %c${api.method}|${api.description}|${api.url}%c|%O|%O`,\r\n        \"color: white; background-color: rgba(177, 13, 201, 0.69); padding: 2px 5px; border-radius: 2px\",\r\n        \"\",\r\n        \"color: #B10DC9\",\r\n        \"\",\r\n        api.params,\r\n        data\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport class ApiSharp {\r\n  private readonly httpClient: IHttpClient\r\n  private readonly cache: ICache<Promise<IResponse<any>>>\r\n  private readonly baseURL: string\r\n  private readonly method: HttpMethod\r\n  private readonly headers: HttpHeader\r\n  private readonly paramsTransformer: Transformer<Params>\r\n  private readonly returnsTransformer: Transformer<any>\r\n  private readonly enableCache: boolean\r\n  private readonly cacheTime: number\r\n  private readonly enableRetry: boolean\r\n  private readonly retryTimes: number\r\n  private readonly timeout: number\r\n  private readonly enableLog: boolean\r\n  private readonly logFormatter: LogFormatter\r\n\r\n  constructor(options: ApiSharpOptions = {}) {\r\n    this.httpClient = getDefault(options.httpClient, defaultConfig.httpClient)\r\n    this.cache = defaultConfig.cache\r\n    this.baseURL = getDefault(options.baseURL, defaultConfig.baseURL)\r\n    this.method = getDefault(options.method, defaultConfig.method)\r\n    this.headers = getDefault(options.headers, defaultConfig.headers)\r\n    this.paramsTransformer = getDefault(options.paramsTransformer, defaultConfig.paramsTransformer)\r\n    this.returnsTransformer = getDefault(options.returnsTransformer, defaultConfig.returnsTransformer)\r\n    this.enableCache = getDefault(options.enableCache, defaultConfig.enableCache)\r\n    this.cacheTime = getDefault(options.cacheTime, defaultConfig.cacheTime)\r\n    this.enableRetry = getDefault(options.enableRetry, defaultConfig.enableRetry)\r\n    this.retryTimes = getDefault(options.retryTimes, defaultConfig.retryTimes)\r\n    this.timeout = getDefault(options.timeout, defaultConfig.timeout)\r\n    this.enableLog = getDefault(options.enableLog, defaultConfig.enableLog)\r\n    this.logFormatter = getDefault(options.logFormatter, defaultConfig.logFormatter)\r\n  }\r\n\r\n  /**\r\n   * 发送请求\r\n   */\r\n  async request<T>(_api: ApiDescriptor | string): Promise<ApiResponse<T>> {\r\n    const api = this.processApi(_api)\r\n\r\n    this.logRequest(api)\r\n\r\n    // 处理 mock 数据\r\n    if (api.enableMock) {\r\n      return { data: api.mockData, from: \"mock\", api, headers: {}, status: 200, statusText: \"OK(mock)\" }\r\n    }\r\n\r\n    let requestPromise: Promise<IResponse<T>>\r\n    let cachedKey\r\n    let hitCache = false\r\n\r\n    // 构造一个超时时自动 reject 的 Promise\r\n    const timeoutPromise: Promise<ApiSharpRequestError> = new Promise((_resolve, reject) => {\r\n      const error = new Error(`请求超时(${api.timeout}ms)`)\r\n      setTimeout(() => reject(error), api.timeout)\r\n    })\r\n\r\n    // 处理缓存\r\n    if (api.enableCache) {\r\n      cachedKey = this.generateCachedKey(api)\r\n      if (this.cache.has(cachedKey)) {\r\n        requestPromise = this.cache.get(cachedKey)!\r\n        hitCache = true\r\n      } else {\r\n        requestPromise = this.sendRequest<T>(api)\r\n        hitCache = false\r\n        this.cache.set(cachedKey, requestPromise, { timeout: api.cacheTime })\r\n      }\r\n    } else {\r\n      requestPromise = this.sendRequest<T>(api)\r\n    }\r\n\r\n    let res: IResponse<T>\r\n\r\n    try {\r\n      // 发起请求\r\n      res = (await Promise.race([requestPromise, timeoutPromise])) as IResponse<T>\r\n    } catch (err) {\r\n      // 请求失败或超时，都会抛出异常并被捕获处理\r\n\r\n      // 请求失败时删除缓存\r\n      if (api.enableCache) {\r\n        this.cache.delete(cachedKey)\r\n      }\r\n      if (api.enableRetry && api.retryTimes >= 1) {\r\n        return this.request({ ...api, retryTimes: api.retryTimes - 1, __retry: true })\r\n      } else {\r\n        this.logResponseError(err, api)\r\n        throw new ApiSharpRequestError(err.message, api)\r\n      }\r\n    }\r\n\r\n    // 检查请求结果，并对失败情况做处理\r\n    const checkResult = this.checkResponseData(res.data)\r\n    if (!checkResult.success) {\r\n      if (api.enableCache) {\r\n        this.cache.delete(cachedKey)\r\n      }\r\n      if (api.enableRetry && api.retryTimes >= 1) {\r\n        return this.request({ ...api, retryTimes: api.retryTimes - 1, __retry: true })\r\n      } else {\r\n        this.logResponseError(new Error(checkResult.errMsg), api, res.data)\r\n        throw new ApiSharpRequestError(checkResult.errMsg, api)\r\n      }\r\n    }\r\n\r\n    if (hitCache) {\r\n      this.logResponseCache(api, res.data)\r\n    } else {\r\n      this.logResponse(api, res.data)\r\n    }\r\n\r\n    return {\r\n      data: api.returnsTransformer(res.data),\r\n      from: hitCache ? \"cache\" : \"network\",\r\n      api,\r\n      status: res.status,\r\n      statusText: res.statusText,\r\n      headers: res.headers\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清除全部缓存\r\n   */\r\n  public clearCache() {\r\n    return this.cache.clear()\r\n  }\r\n\r\n  private sendRequest<T>(api: ProcessedApiDescriptor): Promise<IResponse<T>> {\r\n    return this.httpClient.request<T>({\r\n      baseURL: api.baseURL,\r\n      url: api.url,\r\n      method: api.method,\r\n      headers: api.headers,\r\n      query: api.method === \"GET\" ? api.params : {},\r\n      body: api.method === \"POST\" ? api.params : {}\r\n    })\r\n  }\r\n\r\n  private generateCachedKey(api: ApiDescriptor) {\r\n    return `${api.method} ${api.baseURL}${api.url}?${getSortedString(api.params)}`\r\n  }\r\n\r\n  private processApi(api: ApiDescriptor | string): ProcessedApiDescriptor {\r\n    invariant(api, \"api 为空\")\r\n\r\n    if (isString(api)) {\r\n      api = { url: api }\r\n    }\r\n\r\n    const _api = { ...api } as ProcessedApiDescriptor\r\n\r\n    // 请求地址\r\n    if (!api.url || !String(api.url)) {\r\n      invariant(false, `url 为空`)\r\n    } else {\r\n      _api.url = String(api.url)\r\n    }\r\n\r\n    // 基地址\r\n    if (isUndefined(api.baseURL)) {\r\n      _api.baseURL = this.baseURL\r\n    } else {\r\n      _api.baseURL = api.baseURL\r\n    }\r\n    _api.baseURL = _api.baseURL.replace(/\\/+$/, \"\")\r\n\r\n    // 请求方法\r\n    if (isUndefined(api.method)) {\r\n      _api.method = this.method\r\n    } else if (isString(api.method) && /get|post/i.test(api.method)) {\r\n      _api.method = api.method.toUpperCase() as HttpMethod\r\n    } else {\r\n      invariant(false, `method 期望值为 get|post 其一，实际值为\"${api.method}\"`)\r\n    }\r\n\r\n    if (isUndefined(api.headers)) {\r\n      _api.headers = this.headers\r\n    } else {\r\n      _api.headers = api.headers\r\n    }\r\n\r\n    // 描述\r\n    if (isUndefined(api.description)) {\r\n      _api.description = defaultConfig.description\r\n    } else if (isFunction(api.description)) {\r\n      _api.description = String(api.description.call(null, api))\r\n    } else {\r\n      _api.description = String(api.description)\r\n    }\r\n\r\n    // 开启缓存\r\n    if (isUndefined(api.enableCache)) {\r\n      _api.enableCache = this.enableCache\r\n    } else if (isFunction(api.enableCache)) {\r\n      _api.enableCache = !!api.enableCache.call(null, api)\r\n    } else {\r\n      _api.enableCache = !!api.enableCache\r\n    }\r\n    if (_api.method.toUpperCase() !== \"GET\" && _api.enableCache) {\r\n      _api.enableCache = false\r\n      warning(false, `只有 GET 请求支持开启缓存，当前请求方法为\"${_api.method}\"，缓存开启不会生效`)\r\n    }\r\n\r\n    // 缓存时间\r\n    if (isUndefined(api.cacheTime)) {\r\n      _api.cacheTime = this.cacheTime\r\n    } else if (isNumber(api.cacheTime)) {\r\n      _api.cacheTime = api.cacheTime\r\n    } else if (isFunction(api.cacheTime)) {\r\n      _api.cacheTime = api.cacheTime.call(null, api)\r\n    } else {\r\n      _api.cacheTime = this.cacheTime\r\n      warning(false, `cacheTime 期望 number/function 类型，实际类型为${typeof api.cacheTime}，自动使用默认值`)\r\n    }\r\n\r\n    if (isUndefined(api.enableMock)) {\r\n      _api.enableMock = defaultConfig.enableMock\r\n    } else if (isFunction(api.enableMock)) {\r\n      _api.enableMock = !!api.enableMock.call(null, api)\r\n    } else {\r\n      _api.enableMock = !!api.enableMock\r\n    }\r\n\r\n    if (isUndefined(api.mockData)) {\r\n      _api.mockData = defaultConfig.mockData\r\n    } else if (isFunction(api.mockData)) {\r\n      _api.mockData = api.mockData.call(null, api)\r\n    } else {\r\n      _api.mockData = api.mockData\r\n    }\r\n\r\n    if (isUndefined(api.enableRetry)) {\r\n      _api.enableRetry = this.enableRetry\r\n    } else if (isFunction(api.enableRetry)) {\r\n      _api.enableRetry = !!api.enableRetry.call(null, api)\r\n    } else {\r\n      _api.enableRetry = !!api.enableRetry\r\n    }\r\n\r\n    if (isUndefined(api.retryTimes)) {\r\n      _api.retryTimes = this.retryTimes\r\n    } else if (isNumber(api.retryTimes)) {\r\n      _api.retryTimes = api.retryTimes\r\n    } else if (isFunction(api.retryTimes)) {\r\n      _api.retryTimes = api.retryTimes.call(null, api)\r\n    } else {\r\n      _api.retryTimes = this.retryTimes\r\n      warning(false, `retryTimes 期望 number/function 类型，实际类型为${typeof api.retryTimes}，自动使用默认值`)\r\n    }\r\n\r\n    if (isUndefined(api.timeout)) {\r\n      _api.timeout = this.timeout\r\n    } else {\r\n      _api.timeout = api.timeout\r\n    }\r\n\r\n    if (isUndefined(api.enableLog)) {\r\n      _api.enableLog = this.enableLog\r\n    } else if (isFunction(api.enableLog)) {\r\n      _api.enableLog = !!api.enableLog.call(null, api)\r\n    } else {\r\n      _api.enableLog = !!api.enableLog\r\n    }\r\n\r\n    if (isUndefined(api.logFormatter)) {\r\n      _api.logFormatter = this.logFormatter\r\n    } else if (isObject(api.logFormatter)) {\r\n      _api.logFormatter = {\r\n        logRequest: api.logFormatter.logRequest || this.logFormatter.logRequest,\r\n        logResponse: api.logFormatter.logResponse || this.logFormatter.logResponse,\r\n        logResponseError: api.logFormatter.logResponseError || this.logFormatter.logResponseError,\r\n        logResponseCache: api.logFormatter.logResponseCache || this.logFormatter.logResponseCache\r\n      }\r\n    } else {\r\n      _api.logFormatter = this.logFormatter\r\n    }\r\n\r\n    /**\r\n     * 参数转换 + 类型校验\r\n     */\r\n    let _params = isUndefined(api.params) ? defaultConfig.params : api.params\r\n    let _paramsTransformer\r\n    if (isUndefined(api.paramsTransformer)) {\r\n      _paramsTransformer = this.paramsTransformer\r\n    } else if (isFunction(api.paramsTransformer)) {\r\n      _paramsTransformer = api.paramsTransformer\r\n    } else {\r\n      _paramsTransformer = this.paramsTransformer\r\n      warning(false, `paramsTransformer 期望一个函数，实际接收到${typeof api.paramsTransformer}`)\r\n    }\r\n    _params = _paramsTransformer.call(null, _params)\r\n    if (!isUndefined(api.paramsType)) {\r\n      const componentName = _api.baseURL + _api.url\r\n      PropTypes.checkPropTypes(api.paramsType, _params, \"\", componentName)\r\n    }\r\n    _api.params = _params\r\n\r\n    if (isUndefined(api.returnsTransformer)) {\r\n      _api.returnsTransformer = this.returnsTransformer\r\n    }\r\n\r\n    return _api\r\n  }\r\n\r\n  protected checkResponseData(data: any): { success: boolean; errMsg?: string } {\r\n    // return {\r\n    //   success: false,\r\n    //   errMsg: ''\r\n    // }\r\n    return {\r\n      success: !!data\r\n    }\r\n  }\r\n\r\n  private logRequest(api: ProcessedApiDescriptor) {\r\n    api.enableLog && api.logFormatter.logRequest(api)\r\n  }\r\n\r\n  private logResponse(api: ProcessedApiDescriptor, data) {\r\n    api.enableLog && api.logFormatter.logResponse(api, data)\r\n  }\r\n\r\n  private logResponseError(error: Error, api: ProcessedApiDescriptor, data?: any) {\r\n    api.enableLog && api.logFormatter.logResponseError(error, api, data)\r\n  }\r\n\r\n  private logResponseCache(api: ProcessedApiDescriptor, data) {\r\n    api.enableLog && api.logFormatter.logResponseCache(api, data)\r\n  }\r\n}\r\n"],"names":["isString","v","isFunction","isUndefined","undefined","isNumber","identity","getDefault","args","getSortedString","value","Array","isArray","sort","map","Object","keys","reduce","str","key","index","arr","length","String","Symbol","iterator","asyncIterator","ExpireCacheItem","data","timeout","cacheTime","Date","now","ExpireCache","defaultCacheTime","Map","isOverTime","this","cacheMap","get","overTime","has","set","itemCache","clear","WebXhrClient","request","options","Promise","resolve","queryString","xhr","XMLHttpRequest","fullUrl","baseURL","url","query","q","k","encodeURIComponent","encodeQuery","open","method","headers","forEach","setRequestHeader","body","__proto__","prototype","JSON","stringify","responseType","send","onreadystatechange","readyState","DONE","trim","split","headerMap","line","parts","header","shift","join","formatResponseHeaders","getAllResponseHeaders","response","status","statusText","responseText","parse","err","WebAxiosClient","axios","params","res","ApiSharpRequestError","message","api","Error","defaultConfig","httpClient","cache","enableMock","mockData","description","enableCache","paramsTransformer","returnsTransformer","enableRetry","retryTimes","enableLog","process","logFormatter","logRequest","console","log","logResponse","logResponseError","_error","logResponseCache","ApiSharp","_api","requestPromise","cachedKey","checkResult","_this3","checkResponseData","success","__retry","errMsg","hitCache","from","processApi","timeoutPromise","_resolve","reject","error","setTimeout","generateCachedKey","sendRequest","recover","result","race","e","then","clearCache","invariant","replace","test","toUpperCase","call","_params","paramsType","PropTypes","checkPropTypes"],"mappings":"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"}